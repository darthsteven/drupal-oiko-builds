<?php
use Drupal\Core\Cache\CacheableMetadata;

/**
 * Implements theme_preprocess().
 * 
 * @param $variables
 * @param $hook
 * @param $info
 */
function oiko_preprocess(&$variables, $hook, $info) {
  if ($hook == "eva_display_entity_view") {
    // Make our views titles actual titles.
    if (!empty($variables['title'])) {
      $variables['title'] = '<h3>' . $variables['title'] . '</h3>';
    }

    
    // Give our EVA views a distinctive class so we can style them later. 
    $variables['attributes']['class'][] = 'eva_display_entity_view';
  }
}

/**
 * Implements hook_preprocess_HOOK() for comment templates.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the comment and entity objects.
 *     Array keys: #comment, #commented_entity.
 */
function oiko_preprocess_comment(&$variables) {
  if ($variables['commented_entity']->getEntityTypeId() == 'node') {
    if ($variables['commented_entity']->bundle() == 'forum') {
      $variables['attributes']['class'][] = 'forum-comment';
      $variables['content_attributes']['class'][] = 'forum-comment-content';
      $variables['user_picture'] = '';
      $variables['submitted'] = [
        '#markup' => t('Submitted by @username', ['@username' => $variables['author']]) . '<br />' . $variables['created']
      ];
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 *   - node: The node object.
 *   - view_mode: View mode; e.g., 'full', 'teaser', etc.
 */
function oiko_preprocess_node(&$variables) {
  if ($variables['node']->bundle() == 'forum') {
    $variables['author_picture'] = '';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: A render element representing the field.
 *   - attributes: A string containing the attributes for the wrapping div.
 *   - title_attributes: A string containing the attributes for the title.
 */
function oiko_preprocess_field(&$variables) {
  if ($variables['field_name'] == 'body') {
    if ($variables['entity_type'] == 'node') {
      /** @var \Drupal\node\Entity\Node $node */
      if ($node = $variables['element']['#object']) {
        if ($node->bundle() == 'forum') {
          $variables['attributes']['class'][] = 'forum-topic-content';
        }
      }
    }
  }
  if ($variables['field_name'] == 'field_crm_entities' && $variables['element']['#bundle'] == 'forum' && $variables['element']['#view_mode'] == 'full') {
    $variables['attributes']['class'][] = 'forum-related-to';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function oiko_preprocess_block(&$variables) {
  if ($variables['plugin_id'] === 'system_breadcrumb_block') {
    $variables['attributes']['class'][] = 'breadcrumbs-wrapper';
  }
  if ($variables['plugin_id'] === 'page_title_block') {
    $variables['attributes']['class'][] = 'page-title-wrapper';
  }
  if ($variables['plugin_id'] === 'local_tasks_block') {
    $variables['attributes']['class'][] = 'tabs-wrapper';
  }
}

/**
 * Prepares variables for CIDOC entity templates.
 *
 * Default template: cidoc_entity.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function oiko_preprocess_cidoc_entity(array &$variables) {
  if ($variables['elements']['#view_mode'] == 'inline_field') {
    $variables['attributes']['class'][] = 'cidoc-entity--inline';
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function oiko_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $match = \Drupal::routeMatch();
  if ($match->getRouteName() == 'entity.cidoc_entity.canonical') {
    array_unshift($suggestions, 'page__bare');
  }
  if ($match->getRouteName() == 'oiko_timeline.comparative_timeline_controller_basePage') {
    array_unshift($suggestions, 'page__bare');
  }
}

/**
 * Implements hook_element_info_alter().
 */
function oiko_element_info_alter(&$elements) {
  if (isset($elements['view']['#pre_render'])) {
    $elements['view']['#pre_render'][] = 'oiko_remove_theme_wrappers';
  }
}


/**
 * pre_render callback that removes #theme_wrappers
 */
function oiko_remove_theme_wrappers($element) {
  $element['#theme_wrappers'] = array();
  return $element;
}


/**
 * Implements template_preprocess_views_view().
 */
function oiko_preprocess_views_view(&$variables) {
  /** @var Drupal\views\ViewExecutable $view */
  $view = $variables['view'];
  $style = $view->getStyle()->getPluginId();
  if ($style == 'oiko_leafet_map' && $view->getStyle()->options['full_height']) {
    $variables['attributes']['class'][] = 'l-map-wrap';
  }
}
