@import "../base/global";

body {
  display: flex;
  flex-direction: column;
}

.l-main {
  flex-grow: 1;
  display: flex;
}

.l-sidebar {
  width: 100px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.l-sidebar-upper {

}

.l-sidebar-lower {

}


.l-content-container {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.l-content-header {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  flex-grow: 0;
  height: 50px;
}

.l-main-content {
  flex-grow: 1;
  display: flex;
  height: 100%;
}

.oiko-app {
  height: 100%;
  flex-grow: 1;
  display: flex;
  flex-direction: row;
  align-items: stretch;
}

.oiko-app--map {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  align-content: stretch;
  align-items: stretch;
  width: 100%;
}

.oiko-app--timeline {
  flex-grow: 1;
  width: 100%;
}

.l-content-header-search-box {
  // @todo: remove :)
  background-color: lightskyblue;
}

.l-content-header-user {
}

// Allow for switching the layout based on app state.
.showing-map {

  // We set the explicit orders here for clarity, these are the usual DOM source orderings.
  .l-sidebar {
    order: 1;
  }
  .l-content-container {
    order: 2;
  }

  .l-sidebar-content {
    order: 1;
  }
  .oiko-app {
    order: 2;
  }

  .l-content-header-search-box {
    order: 1;
  }
  .l-content-header-user {
    order: 2;
  }
}

.showing-timeline {
  // Most of these orders are just the reversed orders from .showing-map.
  .l-sidebar {
    order: 2;
  }
  .l-content-container {
    order: 1;
  }

  .l-sidebar-content {
    order: 2;
  }
  .oiko-app {
    order: 1;
  }

  .l-content-header-search-box {
    order: 2;
  }
  .l-content-header-user {
    order: 1;
  }
}

// 'Main' layout
// --------------
// Used by default to layout the sidebars and main content on a
// 12 column grid, in the default page.tpl.php

.l-content-grid-container {
  @include content-grid-container;
}

.l-full {
  @include full();
}

.l-last {
  @include last();
}


// Equal height columns
// --------------------

// Helper to equalise the height of child elements, if we're laying things out
// in multiple columns.
.l-equal-heights {
  @include in-large-layout {
    display: flex;
  }
}
