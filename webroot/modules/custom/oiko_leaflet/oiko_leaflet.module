<?php

/**
 * @file
 * Intergration with leaflet for the Oiko project.
 */
use Drupal\Core\Form\FormStateInterface;
use Drupal\oiko_leaflet\Controller\MapPageController;

/**
 * Implements hook_library_info_alter().
 */
function oiko_leaflet_library_info_alter(array &$libraries, $module) {
  if ($module === 'leaflet' && isset($libraries['leaflet'])) {
    // Override the leaflet library to a local version.
    $libraries['leaflet'] = array(
      'js' => array(
        '/libraries/Leaflet/dist/leaflet.js' => array(
          'preprocess' => false,
        ),
      ),
      'css' => array(
        'component' => array(
          '/libraries/Leaflet/dist/leaflet.css' => array(),
        ),
      ),
      'version' => 'v1.0.3',
      'license' => $libraries['leaflet'],
    );

    $libraries['leaflet-drupal']['dependencies'][] = 'oiko_leaflet/leaflet-sleep';
    $libraries['leaflet-drupal']['dependencies'][] = 'oiko_leaflet/cluster';
    $libraries['leaflet-drupal']['dependencies'][] = 'oiko_leaflet/temporal';
    $libraries['leaflet-drupal']['dependencies'][] = 'oiko_leaflet/popups';
    $libraries['leaflet-drupal']['dependencies'][] = 'oiko_leaflet/empires';
    $libraries['leaflet-drupal']['dependencies'][] = 'oiko_leaflet/arrows';
    $libraries['leaflet-drupal']['dependencies'][] = 'oiko_leaflet/icons';
    $libraries['leaflet-drupal']['dependencies'][] = 'oiko_leaflet/search';
    $libraries['leaflet-drupal']['dependencies'][] = 'oiko_leaflet/mapstate';
    $libraries['leaflet-drupal']['dependencies'][] = 'oiko_leaflet/locate';
    $libraries['leaflet-drupal']['dependencies'][] = 'oiko_leaflet/zoomControl';
    $libraries['leaflet-drupal']['dependencies'][] = 'oiko_leaflet/loading';
    $libraries['leaflet-drupal']['dependencies'][] = 'oiko_leaflet/leaflet.pattern';

  }

  if ($module === 'oiko_leaflet' && isset($libraries['icons'])) {
    $icons = [
      'shadow' => drupal_get_path('module', 'oiko_leaflet') . '/images/marker-shadow.png',
      'blue' => drupal_get_path('module', 'oiko_leaflet') . '/images/icon-blue.png',
      'green' => drupal_get_path('module', 'oiko_leaflet') . '/images/icon-green.png',
      'purple' => drupal_get_path('module', 'oiko_leaflet') . '/images/icon-purple.png',
      'red' => drupal_get_path('module', 'oiko_leaflet') . '/images/icon-red.png',
      'yellow' => drupal_get_path('module', 'oiko_leaflet') . '/images/icon-yellow.png',
      'turquoise' => drupal_get_path('module', 'oiko_leaflet') . '/images/icon-turquoise.png',
    ];
    $libraries['icons']['drupalSettings']['leaflet_icons'] = array_map('file_url_transform_relative', array_map('file_create_url', $icons));
  }
}

/**
 * Implements hook_leaflet_map_info() to return a default map.
 *
 * @return array
 */
function oiko_leaflet_leaflet_map_info() {
  $config = \Drupal::config('oiko_leaflet.settings');
  return array(
    'Ancient Terrain' =>
      array(
        'label' => 'Ancient Terrain',
        'description' => t('Ancient Terrain map.'),
        'settings' => array(
          'dragging' => TRUE,
          'touchZoom' => TRUE,
          'scrollWheelZoom' => TRUE,
          'doubleClickZoom' => TRUE,
          'zoomControl' => TRUE,
          'attributionControl' => TRUE,
          'trackResize' => TRUE,
          'fadeAnimation' => TRUE,
          'zoomAnimation' => TRUE,
          'closePopupOnClick' => TRUE,
          'minZoom' => 1,
          'maxZoom' => 12,
        ),
        'layers' => array(
          'earth' => array(
            'urlTemplate' => $config->get('url_template'),
            'options' => array(
              'attribution' => $config->get('attribution')
            )
          ),
        ),
      ),
  );
}

/**
 * Implements hook_theme_registry_alter
 */
function oiko_leaflet_theme_registry_alter(&$theme_registry) {
  $theme_registry['leaflet_map']['path'] = drupal_get_path('module', 'oiko_leaflet') . '/templates';
}

/**
 * Implements hook_preprocess_leaflet_map().
 */
function oiko_leaflet_preprocess_leaflet_map(&$variables) {
  if ($variables['height'] == 'full') {
    unset($variables['height']);
  }
  if (!empty($variables['map']['sidebar'])) {
    $variables['sidebar'] = [
      '#theme' => 'sidebar',
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function oiko_leaflet_form_node_forum_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // When we've clicked the 'Start a new discussion' button in the side panel,
  // we want to pre-fill that entity in this form - its ID will be in the query
  // string.
  $cidoc_entity_id = \Drupal::request()->query->get('cidoc_entity_id');
  if (is_numeric($cidoc_entity_id)) {
    $cidoc_entity = \Drupal::entityTypeManager()->getStorage('cidoc_entity')->load($cidoc_entity_id);
    $form['field_crm_entities']['widget'][0]['target_id']['#default_value'] = $cidoc_entity;
    $form['field_crm_entities']['#access'] = FALSE;

    // Put this item into the data discussions forum if we need to.
    if (count($form['taxonomy_forums']['widget']['#options']) > 2) {
      foreach ($form['taxonomy_forums']['widget']['#options'] as $i => $option) {
        if ($i !== '_none' && $i !== 109) {
          unset($form['taxonomy_forums']['widget']['#options'][$i]);
        }
      }
    }
  }

  // If there's only one option, preselect it for convenience.
  if (count($form['taxonomy_forums']['widget']['#options']) <= 2) {
    $options = $form['taxonomy_forums']['widget']['#options'];
    unset($options['_none']);
    $form['taxonomy_forums']['widget']['#default_value'] = key($options);
    // And hide.
    $form['taxonomy_forums']['#access'] = FALSE;
  }
  // Remove the preview button. It doesn't make sense here.
  $form['actions']['preview']['#access'] = FALSE;
}

function oiko_leaflet_sharemessage_token_context_alter($entity, &$context) {
  if ($cidoc_entity = \Drupal::request()->attributes->get('cidoc_entity')) {
    $context['cidoc_entity'] = $cidoc_entity;
  }
}

function oiko_leaflet_form_sharemessage_edit_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['sharemessage_token_help']['browser']['#token_types'])) {
    $form['sharemessage_token_help']['browser']['#token_types'][] = 'cidoc_entity';
  }
}

/**
 * Implements hook_entity_extra_field_info().
 */
function oiko_leaflet_entity_extra_field_info() {
  return \Drupal::service('oiko_leaflet.hook_implementations')->extra_field_info();
}

/**
 * Implements hook_entity_view_alter()
 */
function oiko_leaflet_entity_view_alter(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  return \Drupal::service('oiko_leaflet.hook_implementations')->entity_view_alter($build, $entity, $display);
}

  /**
 * Implements hook_form_cidoc_entity_bundle_edit_form_alter().
 */
function oiko_leaflet_form_cidoc_entity_bundle_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $bundle = $form_state->getFormObject()->getEntity();

  $form['oiko_leaflet_item_color'] = array(
    '#type' => 'select',
    '#title' => t('Marker color'),
    '#default_value' => $bundle->getThirdPartySetting('oiko_leaflet', 'item_color', ''),
    '#options' => \Drupal\oiko_leaflet\ItemColorInterface::ITEM_COLORS,
    '#empty_option' => t('Default (blue)'),
    '#access' => \Drupal::service('oiko_leaflet.item_color')->getColorSystem() == \Drupal\oiko_leaflet\ItemColorInterface::COLOR_SYSTEM_CIDOC_ENTITY_CLASS,
    '#description' => t('Optionally specify the color markers and interface elements should be if they are of this entity type'),
  );

  $form['#entity_builders'][] = 'oiko_leaflet_cidoc_entity_bundle_edit_form_entity_builder';
}

/**
 * Set our third party settings on the config entity.
 */
function oiko_leaflet_cidoc_entity_bundle_edit_form_entity_builder($entity_type, \Drupal\cidoc\Entity\CidocEntityBundle $type, &$form, FormStateInterface $form_state) {
  if (!empty($form_state->getValue('oiko_leaflet_item_color'))) {
    $type->setThirdPartySetting('oiko_leaflet', 'item_color', $form_state->getValue('oiko_leaflet_item_color'));
  }
  else {
    $type->unsetThirdPartySetting('oiko_leaflet', 'item_color');
  }
}
