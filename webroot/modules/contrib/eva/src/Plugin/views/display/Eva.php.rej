--- lib/Drupal/eva/Plugin/views/display/EvaDisplayPlugin.php
+++ src/Plugin/views/display/Eva.php
@@ -2,30 +2,35 @@
 
 /**
  * @file
- * Contains Drupal\eva\Plugin\views\display\EvaDisplayPlugin.
+ * Contains Drupal\eva\Plugin\views\display\Eva.
  */
 
 namespace Drupal\eva\Plugin\views\display;
 
 use Drupal\views\Plugin\views\display\DisplayPluginBase;
-use Drupal\Component\Annotation\Plugin;
-use Drupal\Core\Annotation\Translation;
-use Drupal\Core\Entity\EntityManager;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Component\Utility\SafeMarkup;
+use Drupal\Component\Utility\Html;
+use Drupal\Core\Url;
 
 /**
- * A plugin to handle defaults on a view.
+ * The plugin that handles an EVA display in views.
+ *
  *
  * @ingroup views_display_plugins
  *
- * @Plugin(
- *   id = "eva",
- *   title = @Translation("EVA Field"),
- *   help = @Translation("View to be attached to any entity."),
- *   theme = "views_view",
- *   uses_hook_entity_view = TRUE
+ * @ViewsDisplay(
+ *   id = "entity_view",
+ *   title = @Translation("EVA"),
+ *   admin = @Translation("EVA"),
+ *   help = @Translation("Attach a view to an entity"),
+ *   theme = "eva_display_entity_view",
+ *   uses_menu_links = FALSE,
+ *   uses_hook_entity_view = TRUE,
  * )
  */
-class EvaDisplayPlugin extends DisplayPluginBase {
+
+class Eva extends DisplayPluginBase {
 
   /**
    * Overrides \Drupal\views\Plugin\views\display\PathPluginBase::defineOptions().
@@ -33,12 +38,14 @@ class EvaDisplayPlugin extends DisplayPluginBase {
   protected function defineOptions() {
     $options = parent::defineOptions();
 
-    $options['entity_type'] = array('default' => '');
-    $options['bundles'] = array('default' => array());
-    $options['argument_mode'] = array('default' => 'id');
-    $options['default_argument'] = array('default' => '');
-    $options['show_title'] = 0;
-    $options['exposed_form_as_field'] = 0;
+    $options['entity_type']['default'] = '';
+    $options['bundles']['default'] = array();
+    $options['argument_mode']['default'] = 'id';
+    $options['default_argument']['default'] = '';
+
+
+    $options['title']['default'] = '';
+    $options['defaults']['default']['title'] = FALSE;
 
     return $options;
   }
@@ -58,10 +65,11 @@ class EvaDisplayPlugin extends DisplayPluginBase {
     );
 
     if ($entity_type = $this->getOption('entity_type')) {
-      $entity_info = entity_get_info($entity_type);
-      $type_name = $entity_info['label'];
+      $entity_info = \Drupal::entityManager()->getDefinition($entity_type);
+      $type_name = $entity_info->get('label');
+
       $bundle_names = array();
-      $bundle_info = entity_get_bundles($entity_type);
+      $bundle_info = \Drupal::entityManager()->getBundleInfo($entity_type);
       foreach ($this->getOption('bundles') as $bundle) {
         $bundle_names[] = $bundle_info[$bundle]['label'];
       }
@@ -69,50 +77,45 @@ class EvaDisplayPlugin extends DisplayPluginBase {
 
     $options['entity_type'] = array(
       'category' => 'entity_view',
-      'title' => t('Entity type'),
-      'value' => empty($type_name) ? t('None') : $type_name,
+      'title' => $this->t('Entity type'),
+      'value' => empty($type_name) ? $this->t('None') : $type_name,
     );
 
     $options['bundles'] = array(
       'category' => 'entity_view',
-      'title' => t('Bundles'),
-      'value' => empty($bundle_names) ? t('All') : implode(', ', $bundle_names),
+      'title' => $this->t('Bundles'),
+      'value' => empty($bundle_names) ? $this->t('All') : implode(', ', $bundle_names),
     );
 
     $argument_mode = $this->getOption('argument_mode');
     $options['arguments'] = array(
       'category' => 'entity_view',
-      'title' => t('Arguments'),
-      'value' => empty($argument_mode) ? t('None') : check_plain($argument_mode),
+      'title' => $this->t('Arguments'),
+      'value' => empty($argument_mode) ? $this->t('None') : SafeMarkup::checkPlain($argument_mode),
     );
 
     $options['show_title'] = array(
       'category' => 'entity_view',
-      'title' => t('Show title'),
-      'value' => $this->getOption('show_title') ? t('Yes') : t('No'),
-    );
-
-    $options['exposed_form_as_field'] = array(
-      'category' => 'entity_view',
-      'title' => t('Exposed Form as Field'),
-      'value' => $this->getOption('exposed_form_as_field') ? t('Yes') : t('No'),
+      'title' => $this->t('Show title'),
+      'value' => $this->getOption('show_title') ? $this->t('Yes') : $this->t('No'),
     );
   }
 
   /**
    * Overrides \Drupal\views\Plugin\views\display\callbackPluginBase::buildOptionsForm().
    */
-  public function buildOptionsForm(&$form, &$form_state) {
+  public function buildOptionsForm(&$form, FormStateInterface $form_state) {
     parent::buildOptionsForm($form, $form_state);
 
-    $entity_info = drupal_container()->get('plugin.manager.entity')->getDefinitions();
+    $entity_info = \Drupal::entityManager()->getDefinitions();
     $entity_type = $this->getOption('entity_type');
 
-    switch ($form_state['section']) {
+    switch ($form_state->get('section')) {
       case 'entity_type':
         foreach ($entity_info as $type => $info) {
-          if (!empty($info['render_controller_class'])) {
-            $entity_names[$type] = $info['label'];
+          // is this a content/front-facing entity?
+          if ($info instanceof \Drupal\Core\Entity\ContentEntityType) {
+            $entity_names[$type] = $info->get('label');
           }
         }
 
@@ -120,44 +123,46 @@ class EvaDisplayPlugin extends DisplayPluginBase {
         $form['entity_type'] = array(
           '#type' => 'radios',
           '#required' => TRUE,
-          '#title' => t("Attach this display to the following entity type"),
+          '#validated' => TRUE,
+          '#title' => $this->t('Attach this display to the following entity type'),
           '#options' => $entity_names,
           '#default_value' => $this->getOption('entity_type'),
         );
         break;
 
       case 'bundles':
-        foreach (entity_get_bundles($entity_type) as $bundle => $info) {
+        $options = array();
+        foreach (\Drupal::entityManager()->getBundleInfo($entity_type) as $bundle => $info) {
           $options[$bundle] = $info['label'];
         }
-        $form['#title'] .= t('Bundles');
+        $form['#title'] .= $this->t('Bundles');
         $form['bundles'] = array(
           '#type' => 'checkboxes',
-          '#title' => t("Attach this display to the following bundles.  If no bundles are selected, the display will be attached to all."),
+          '#title' => $this->t('Attach this display to the following bundles.  If no bundles are selected, the display will be attached to all.'),
           '#options' => $options,
           '#default_value' => $this->getOption('bundles'),
         );
         break;
 
       case 'arguments':
-        $form['#title'] .= t('Arguments');
+        $form['#title'] .= $this->t('Arguments');
         $default = $this->getOption('argument_mode');
         $options = array(
-          'none' => t("No special handling"),
-          'id' => t("Use the ID of the entity the view is attached to"),
-          'token' => t("Use tokens from the entity the view is attached to"),
+          'None' => $this->t("No special handling"),
+          'id' => $this->t("Use the ID of the entity the view is attached to"),
+          'token' => $this->t("Use tokens from the entity the view is attached to"),
         );
 
         $form['argument_mode'] = array(
           '#type' => 'radios',
-          '#title' => t("How should this display populate the view's arguments?"),
+          '#title' => $this->t("How should this display populate the view's arguments?"),
           '#options' => $options,
           '#default_value' => $default,
         );
 
         $form['token'] = array(
           '#type' => 'fieldset',
-          '#title' => t('Token replacement'),
+          '#title' => $this->t('Token replacement'),
           '#collapsible' => TRUE,
           '#states' => array(
             'visible' => array(
@@ -170,7 +175,7 @@ class EvaDisplayPlugin extends DisplayPluginBase {
           '#title' => t('Arguments'),
           '#type' => 'textfield',
           '#default_value' => $this->getOption('default_argument'),
-          '#description' => t('You may use token replacement to provide arguments based on the current entity. Separate arguments with "/".'),
+          '#description' => $this->t('You may use token replacement to provide arguments based on the current entity. Separate arguments with "/".'),
         );
         break;
 
@@ -178,70 +183,67 @@ class EvaDisplayPlugin extends DisplayPluginBase {
         $form['#title'] .= t('Show title');
         $form['show_title'] = array(
           '#type' => 'checkbox',
-          '#title' => t('Show the title of the view above the attached view.'),
+          '#title' => $this->t('Show the title of the view above the attached view.'),
           '#default_value' => $this->getOption('show_title'),
         );
         break;
-      case 'exposed_form_as_field':
-        $form['#title'] .= t('Exposed Form as Field');
-        $form['exposed_form_as_field'] = array(
-          '#type' => 'checkbox',
-          '#title' => t('Split off Exposed Form as Separate Field'),
-          '#default_value' => $this->getOption('exposed_form_as_field'),
-          '#description' => t('Check this box to have a separate field for this view\'s exposed form on the "Manage Display" tab'),
-        );
     }
   }
 
-  public function validateOptionsForm(&$form, &$form_state) {
-    $errors = parent::validateOptionsForm($form, $form_state);
+  public function validateOptionsForm(&$form, FormStateInterface $form_state) {
+    switch ($form_state->get('section')) {
+      case 'entity_type':
+        if (empty($form_state->getValue('entity_type'))) {
+          $form_state->setError($form['entity_type'], $this->t('Must select an entity'));
+        }
+        break;
+    }
+  }
 
-    $entity_type = $this->getOption('entity_type');
-    if (empty($entity_type)) {
-      $errors[] = t('Display @display must have an entity type selected.', array('@display' => $this->display->display_title));
+  public function validate() {
+    $errors = array();
+    if (empty($this->getOption('entity_type'))) {
+      $errors[] = $this->t('Display "@display" must be attached to an entity.', array('@display' => $this->display['display_title']));
     }
     return $errors;
   }
 
-  public function submitOptionsForm(&$form, &$form_state) {
+  public function submitOptionsForm(&$form, FormStateInterface $form_state) {
     parent::submitOptionsForm($form, $form_state);
 
-    switch ($form_state['section']) {
+    switch ($form_state->get('section')) {
       case 'entity_type':
-        $new_entity = $form_state['values']['entity_type'];
+        $new_entity = $form_state->getValue('entity_type');
         $old_entity = $this->getOption('entity_type');
-
         $this->setOption('entity_type', $new_entity);
+
         if ($new_entity != $old_entity) {
           // Each entity has its own list of bundles and view modes. If there's
           // only one on the new type, we can select it automatically. Otherwise
           // we need to wipe the options and start over.
-          $new_entity_info = drupal_container()->get('plugin.manager.entity')->getDefinition($new_entity);
-          $new_bundles_keys = entity_get_bundles($new_entity);
+          $new_entity_info = \Drupal::entityManager()->getDefinition($new_entity);
+          $new_bundles_keys = \Drupal::entityManager()->getBundleInfo($new_entity);
           $new_bundles = array();
-          if (count($new_bundle_keys) == 1) {
-            $new_bundles[] = $new_bundle_keys[0];
+          if (count($new_bundles_keys) == 1) {
+            $new_bundles[] = $new_bundles_keys[0];
           }
           $this->setOption('bundles', $new_bundles);
         }
         break;
       case 'bundles':
-        $this->setOption('bundles', array_values(array_filter($form_state['values']['bundles'])));
+        $this->setOption('bundles', array_values(array_filter($form_state->getValue('bundles'))));
         break;
       case 'arguments':
-        $this->setOption('argument_mode', $form_state['values']['argument_mode']);
-        if ($form_state['values']['argument_mode'] == 'token') {
-          $this->setOption('default_argument', $form_state['values']['default_argument']);
+        $this->setOption('argument_mode', $form_state->getValue('argument_mode'));
+        if ($form_state->getValue('argument_mode') == 'token') {
+          $this->setOption('default_argument', $form_state->getValue('default_argument'));
         }
         else {
           $this->setOption('default_argument', NULL);
         }
         break;
       case 'show_title':
-        $this->setOption('show_title', $form_state['values']['show_title']);
-        break;
-      case 'exposed_form_as_field':
-        $this->setOption('exposed_form_as_field', $form_state['values']['exposed_form_as_field']);
+        $this->setOption('show_title', $form_state->getValue('show_title'));
         break;
     }
   }
@@ -252,7 +254,7 @@ class EvaDisplayPlugin extends DisplayPluginBase {
     if (isset($this->view->current_entity)) {
       $entity = $this->view->current_entity;
       $entity_type = $this->view->display_handler->getOption('entity_type');
-      $entity_info = drupal_container()->get('plugin.manager.entity')->getDefinition($entity_type);
+      $entity_info = \Drupal::entityManager()->getDefinition($entity_type);
   
       $arg_mode = $this->view->display_handler->getOption('argument_mode');
       if ($arg_mode == 'token') {
@@ -262,39 +264,39 @@ class EvaDisplayPlugin extends DisplayPluginBase {
           $new_args = array();
           // We have to be careful to only replace arguments that have tokens.
           foreach ($token_values as $key => $value) {
-            $new_args[$key] = $value;
+            $new_args[Html::escape($key)] = Html::escape($value);
           }
   
           $this->view->args = $new_args;
         }
       }
       elseif ($arg_mode == 'id') {
-        $this->view->args = array($entity->{$entity_info['entity keys']['id']});
+        $this->view->args = array($entity->id());
       }
     }
   }
   
   public function getPath() {
     if (isset($this->view->current_entity)) { 
-     $uri = $this->view->current_entity->uri();
+      $uri = $this->view->current_entity->url();
       if ($uri) {
         $uri['options']['absolute'] = TRUE;
         return url($uri['path'], $uri['options']);
       }
     }
-    return parent::get_path();
+    return parent::getPath();
   }
  
   function execute() {
     // Prior to this being called, the $view should already be set to this
     // display, and arguments should be set on the view.
     if (!isset($this->view->override_path)) {
-      $this->view->override_path = $_GET['q'];
+      $this->view->override_path = \Drupal::service('path.current')->getPath();
     }
 
-    $data = $this->view->render();
+    $element = $this->view->render();
     if (!empty($this->view->result) || $this->getOption('empty') || !empty($this->view->style_plugin->definition['even empty'])) {
-      return $data;
+      return $element;
     }
   }
 }
