--- eva.module
+++ eva.module
@@ -1,44 +1,36 @@
 <?php
 
-// Load theme functions
-module_load_include('inc', 'eva', 'eva.theme');
-
 /**
- * Implements hook_views_api().
+ * @file
+ * Module implementing EVA extra field and views display
  */
-function eva_views_api() {
-  return array(
-    'api' => 3,
-  );
-}
+
+use Drupal\views\Views;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\Component\Utility\Xss;
+use Drupal\Core\Utility\Token;
 
 /**
- * Implements hook_field_extra_fields().
+ * Implements hook_entity_extra_field_info() to add the view fields to relevant entities
  */
-function eva_field_extra_fields() {
-  $extras = array();
+function eva_entity_extra_field_info() {
+  $extra = array();
   $views = eva_get_views();
-  
-  //exit("<pre>" . var_export($views, TRUE) . "</pre>");
-  
+
   foreach ($views as $entity => $data) {
     foreach ($data as $view) {
-      if ($view['bundles']) {
-        $bundles = $view['bundles'];
-      }
-      else {  // If no bundles are set, apply to all bundles.
-        $bundles = array_keys(entity_get_bundles($entity));
-      }
+      $bundles = $view['bundles'];
       foreach ($bundles as $bundle) {
-        $extras[$entity][$bundle]['display'][$view['id'] . '_' . $view['display']] = array(
-          'label' => (empty($view['title'])) ? $view['id'] : $view['title'],
-          'description' => $view['title'],
+        $extra[$entity][$bundle]['display'][$view['name'] . '_' . $view['display']] = array(
+          'label' => (empty($view['title'])) ? $view['name'] : $view['title'], 
+          'description' => $view['title'], 
           'weight' => 10,
         );
         // Provide a separate extra field for the exposed form if there is any.
-        if (!empty($view['exposed form']) && !empty($view['exposed form split'])) {
-          $extras[$entity][$bundle]['display'][$view['name'] . '_' . $view['display'] . '_' . 'form'] = array(
-            'label' => ((empty($view['title'])) ? $view['name'] : $view['title']) . ' (' . t('Exposed form') . ')',
+        if ($view['uses exposed']) {
+          $extra[$entity][$bundle]['display'][$view['name'] . '_' . $view['display'] . '_' . 'form'] = array(
+            'label' => ((empty($view['title'])) ? $view['name'] : $view['title']) . ' (' . t('Exposed form') . ')', 
             'description' => t('The exposed filter form of the view.'),
             'weight' => 9,
           );
@@ -47,57 +39,9 @@ function eva_field_extra_fields() {
     }
   }
 
-  return $extras;
+  return $extra;
 }
 
-/**
- * Implements hook_entity_view_alter().
- *
- * This is a terrible, terrible hack that should not be necessary; taxonomy and
- * some other entity types use fields, but don't implement  hook_entity_view().
- * We have to ALTER those entity types after they're built. For the time being,
- * we'll use a list of special cases to trigger this special handling. 
- */
-function eva_entity_view_alter(&$build, $type) {
-  $view_mode = $build['#view_mode'];
-  $language = $build['#language'];
-
-  $entity_data = entity_get_info($type);
-  $entity = _eva_extract_entity_from_build($build);
-
-  $entity_ids = entity_extract_ids($type, $entity);
-  $settings = field_view_mode_settings($type, $entity_ids[2]);
-  $fields = field_extra_fields_get_display($type, $entity_ids[2], $view_mode);
-  $views = eva_get_views($type);
-  
-  foreach ($views as $info) {
-    $longname = $info['name'] . '_' . $info['display'];
-    if (isset($fields[$longname]) && $fields[$longname]['visible']) {
-      if ($view = views_get_view($info['name'])) {
-        $view->set_display($info['display']);
-        if ($view->access($info['display'])) {
-          $view->current_entity = $entity;
-
-          if (isset($fields[$longname . '_form']) && $fields[$longname . '_form']['visible']) {
-            $view->init_handlers();
-            $exposed_form = $view->display_handler->get_plugin('exposed_form');
-
-            $build[$longname . '_form'] = array(
-              '#markup' => $exposed_form->render_exposed_form(TRUE),
-            );
-          }
-          $result = $view->execute_display($info['display']);
-          if (!empty($result)) {
-            $build[$longname] = array(
-              '#markup' => $result,
-              '#weight' => $fields[$longname]['weight'],
-            );
-          }
-        }
-      }
-    }
-  }
-}
 
 /**
  * Get a list of views and displays attached to speficic entities.
@@ -114,71 +58,73 @@ function eva_entity_view_alter(&$build, $type) {
  *   An array of view name/display name values, or an empty array().
  */
 function eva_get_views($type = NULL, $reset = FALSE) {
-  $used_views = &drupal_static(__FUNCTION__);
-
   // Build and cache the data, both in the DB and statically.
-  $views = views_get_applicable_views('uses_hook_entity_view');
+  $views = Views::getApplicableViews('uses_hook_entity_view');
+
+  $used_views = array();
   foreach ($views as $data) {
-    list($view, $display_id) = $data;
+    list($view_name, $display_id) = $data;
+    $view = Views::getView($view_name);
+
     // Initialize handlers, to determine if the view uses exposed filters.
+    $view->setDisplay($display_id);
     $view->initHandlers();
-    $view_entity = $view->display_handler->getOption('entity_type');
-    debug($view->display_handler->getOption('entity_type'));
+    $display = $view->display_handler;
+
+    $view_entity = $display->getOption('entity_type');
     $used_views[$view_entity][] = array(
+      'name' => $view_name,
       'id' => $view->storage->get('id'),
-      'title' => 'EVA: ' . $view->storage->get('human_name') . ' - ',
+      'title' => 'EVA: ' . $view->storage->get('label') . ' - ' . $view->storage->getDisplay($display_id)['display_title'],
       'display' => $display_id,
-      'bundles' => $view->display_handler->getOption('bundles'),
-      'exposed form' => $view->display_handler->usesExposed(),
-      'exposed form split' => $view->display_handler->getOption('exposed_form_as_field'),
+      'bundles' => $display->getOption('bundles'),
+      'uses exposed' => $display->usesExposed(),
     );
     $view->destroy();
   }
-  // Now spit back the data.
-  if (isset($type) & isset($used_views)) {
+
+  if (!is_null($type)) {
     return isset($used_views[$type]) ? $used_views[$type] : array();
   }
-  else {
-    return isset($used_views) ? $used_views : array();
-  }
+  return $used_views;
 }
 
 /**
- * Extract an actual entity object from its $build array.
- *
- * This is a bit more complicated than it should be, since core entities, contrib
- * entities, and contrib entities based on EntityAPI all store their junk in
- * different slots of the build array. See http://drupal.org/node/1170198.
- *
- * @param $build
- *   The token string defined by the view.
- * @param $entity_data
- *   The token type.
- *
- * I hate you, Milkman Dan.
+ * implement hook_entity_view_alter()
  */
-function _eva_extract_entity_from_build($build) {
-  // EntityAPI often sticks stuff in here.
-  if (!empty($build['#entity'])) {
-    return $build['#entity'];
-  }
+function eva_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
+  $type = $entity->getEntityTypeId();
+  $views = eva_get_views($type);
 
-  // Other entities stick them here!
-  elseif (!empty($build['#' . $build['#entity_type']])) {
-    return $build['#' . $build['#entity_type']];
-  }
+  foreach ($views as $info) {
+    $longname = $info['name'] .'_'. $info['display'];
 
-  // Some entities are naughty.
-  elseif ($build['#entity_type'] == 'user') {
-    return $build['#account'];
-  }
-  elseif ($build['#entity_type'] == 'taxonomy_term') {
-    return $build['#term'];
-  }
+    if ($display->getComponent($longname)) {
+      if ($view = Views::getView($info['name'])) {
+        $view->setDisplay($info['display']);
+        if ($view->access($info['display'])) {
+          // no parent for current_entity; it's used by the display's preExecute
+          $view->current_entity = $entity;
+
+          // exposed form
+          if ($info['uses exposed']) {
+            $view->initHandlers();
+            $exposed_form = $view->display_handler->getPlugin('exposed_form');
+            $build[$longname . '_form'] = $exposed_form->renderExposedForm(TRUE);
+          }
+
+          $element = $view->executeDisplay($info['display']);
 
-  return FALSE;
+          if (!empty($element)) {
+            $build[$longname][] = $element;
+          }
+        }
+      }
+    }
+  }
 }
 
+
 /**
  * Get view arguments array from string that contains tokens
  *
@@ -190,15 +136,13 @@ function _eva_extract_entity_from_build($build) {
  *   The object being used for replacement data (typically a node).
  * @return
  *   An array of argument values.
- *
- * @todo: security?
  */
 function eva_get_arguments_from_token_string($string, $type, $object) {
   $args = trim($string);
   if (empty($args)) {
     return array();
   }
-  $args = token_replace($args, array($type => $object), array('sanitize' => FALSE));
+  $args = Token::replace($args, array($type => $object), array('sanitize' => FALSE));
   return explode('/', $args);
 }
 
@@ -206,27 +150,45 @@ function eva_get_arguments_from_token_string($string, $type, $object) {
  * Implements hook_modules_enabled().
  */
 function eva_modules_enabled($modules) {
-  // Reset the static cache in case any of the enabled modules
-  // implement an eva view
-  drupal_static_reset('eva_get_views');
-  cache_clear_all('*', 'cache_views', TRUE);
+  _eva_reset();
 }
 
 /**
  * Implements hook_modules_disabled().
  */
 function eva_modules_disabled($modules) {
-  // Reset the static cache in case any of the disabled modules
-  // implemented an eva view
+  _eva_reset();
+}
+
+/**
+ * Cache clearing helper function
+ * Reset the static cache in case any of the disabled modules
+ * implemented an eva view
+ */
+function _eva_reset() {
   drupal_static_reset('eva_get_views');
-  cache_clear_all('*', 'cache_views', TRUE);
+  \Drupal::cache('render')->deleteAll();
 }
 
 /**
- * Implements hook_form_FORM_ID_alter().
+ * Clear the field cache when view cache clears
+ * this is intended to fire when a View is saved
+ * hopefully it won't kick off an endless cache clearing loop
  */
-function eva_form_views_ui_edit_form_alter(&$form, &$form_state, $form_id) {
-  // Clear the field cache when views are saved. This will make sure newly
-  // created EVA views and/or exposed filters will appear.
-  $form['actions']['save']["#submit"][] = 'field_cache_clear';
-}+function eva_views_invalidate_cache() {
+  // see https://www.drupal.org/node/2281897
+  \Drupal::entityManager()->clearCachedFieldDefinitions();
+}
+
+/**
+ * templating preprocessing
+ * figure out the title and whether there's an exposed form
+ */
+function template_preprocess_eva_display_entity_view(&$variables) {
+  $view = $variables['view'];
+  $display = $view->display_handler;
+  $variables['title'] = $display->getOption('show_title') ? Xss::filterAdmin($view->getTitle()) : '';
+  $variables['exposed_form_as_field'] = $display->getOption('exposed_form_as_field');
+  // inject the dom ID since this isn't done automatically
+  $variables['dom_id'] = $view->dom_id;
+}
