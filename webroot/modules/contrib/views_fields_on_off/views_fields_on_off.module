<?php

/**
 * @file
 * Provides a Views Global field that allows users to turn fields on/off.
 */

use Drupal\views\ViewExecutable;
use Drupal\views\Views;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_views_pre_view().
 */
function views_fields_on_off_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  // If using the Views filter rather than the Views field.
  $filter_handlers = $view->getHandlers('filter', $view->current_display);
  if (!empty($filter_handlers)) {
    foreach ($filter_handlers as $filter_plugin) {
      $plugin_id = $filter_plugin['plugin_id'] ?? '';
      if ($plugin_id === 'views_fields_on_off_form' && empty($filter_plugin['bypass_hook_views_pre_view'])) {
        _views_fields_on_off_process_filter($view, $filter_plugin);
      }
    }
  }
  // If using the Views field.
  $field_handlers = $view->getHandlers('field', $view->current_display);
  if (!empty($field_handlers)) {
    foreach ($field_handlers as $field_plugin) {
      $plugin_id = $field_plugin['plugin_id'] ?? '';
      if ($plugin_id === 'views_fields_on_off_form') {
        _views_fields_on_off_process_field($view, $display_id);
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function views_fields_on_off_preprocess_views_view(&$variables) {
  $view = $variables['view'];
  $variables['exposed']['#parent_view'] = $view->id();
  $plugin_id = 'views_fields_on_off_form';
  $filter_plugin = $view->getHandler($view->current_display, 'filter', $plugin_id);
  if (!empty($filter_plugin) && !empty($filter_plugin['bypass_hook_views_pre_view'])) {
    $view->filter[$plugin_id]->preprocess($variables);
  }
}

/**
 * Implements template_preprocess_views_exposed_form().
 */
function views_fields_on_off_preprocess_views_exposed_form(&$variables) {
  if (!isset($variables['form']) || !isset($variables['form']['#parent_view'])) {
    return;
  }
  $view = Views::getView($variables['form']['#parent_view']);
  if (!empty($view)) {
    $submitted = $view->getExposedInput();
  }
  else {
    $submitted = [];
  }
  if (empty($submitted)) {
    foreach ($variables['form'] as $form_item) {
      if (is_array($form_item) && !empty($form_item['#plugin_id']) && ($form_item['#plugin_id'] === 'views_fields_on_off_form') && $form_item['#default_enabled']) {
        $select_type = $form_item['#type'];
        if (in_array($select_type, ['checkboxes', 'select'])) {
          if ($select_type === 'checkboxes') {
            foreach ($form_item['#options'] as $key => $option) {
              $field_name = $form_item['#name'];
              $variables['form'][$field_name][$key]['#checked'] = TRUE;
            }
          }
          elseif ($form_item['#multiple']) {
            $field_name = $form_item['#name'];
            $selected = [];
            foreach ($form_item['#options'] as $key => $option) {
              $selected[$key] = $key;
            }
            // Each select option will be shown as selected.
            $variables['form'][$field_name]['#value'] = $selected;
          }
        }
      }
    }
  }
}

/**
 * Helper function to process the field plugin.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   The view object.
 * @param string $display_id
 *   The display id.
 */
function _views_fields_on_off_process_field(ViewExecutable $view, $display_id) {
  $hasFields = array_key_exists('fields', $view->display_handler->options);
  if ($hasFields) {
    $fields = $view->display_handler->getOption('fields');
    $views_on_off_fields = [];
    foreach ($fields as $key => &$field) {
      if ($field['plugin_id'] === 'views_fields_on_off_form') {
        $views_on_off_fields[] = $key;
      }
    }
    if (!empty($views_on_off_fields)) {
      // We need $on_off_submitted because if the form is submitted with no
      // checkboxes checked, none of the fields_on_off values will be present,
      // so it thinks this is a fresh view and all the columns should be
      // checked.
      $on_off_submitted = _views_fields_on_off_get_selected('fields_on_off_hidden_submitted');
      if ($on_off_submitted) {
        // Get all the fields known to be checked based on the params.
        foreach ($views_on_off_fields as $views_on_off_field) {
          $select_type = $view->getHandler($display_id, 'field', $views_on_off_field)['exposed_select_type'];
          foreach ($fields[$views_on_off_field]['fields'] as $field_option) {
            // The fields selected based on the parameters.
            $selection = _views_fields_on_off_get_selected($views_on_off_field);
            if (in_array($select_type, ['select', 'radios'])) {
              if (!empty($selection) && ($field_option !== $selection) && !empty($field_option)) {
                $fields[$field_option]['exclude'] = 1;
              }
            }
            else {
              if ((empty($selection) && !empty($field_option)) || (!empty($field_option) && !in_array($field_option, (array) $selection))) {
                $fields[$field_option]['exclude'] = 1;
              }
            }
          }
          $fields[$views_on_off_field]['exclude'] = 1;
        }
      }
      else {
        foreach ($views_on_off_fields as $views_on_off_field) {
          foreach ($fields[$views_on_off_field]['fields'] as $field_option) {
            if (!empty($field_option) && array_key_exists('default_enabled', $fields[$views_on_off_field]) && !$fields[$views_on_off_field]['default_enabled']) {
              $fields[$field_option]['exclude'] = 1;
            }
          }
          $fields[$views_on_off_field]['exclude'] = 1;
        }
      }
      $view->display_handler->setOption('fields', $fields);
    }
  }
}

/**
 * Helper function to process the filter plugin.
 *
 * @param \Drupal\views\ViewExecutable $view
 *   The view object.
 * @param array $filter_plugin
 *   The filter plugin.
 */
function _views_fields_on_off_process_filter(ViewExecutable $view, $filter_plugin) {
  if (empty($filter_plugin['exposed'])) {
    return;
  }
  $filter_identifier = $filter_plugin['expose']['identifier'];
  $is_multiple = $filter_plugin['expose']['multiple'];
  if ($is_multiple) {
    $default = $filter_plugin['group_info']['default_group_multiple'];
    $selected = _views_fields_on_off_get_selected($filter_identifier);
  }
  else {
    $default = $filter_plugin['group_info']['default_group'];
    $selected = [_views_fields_on_off_get_selected($filter_identifier)];
  }
  if (!$selected || in_array($default, $selected)) {
    return;
  }
  $filter_options = $filter_plugin['value'];
  $fields = $view->display_handler->getOption('fields');

  $keep = TRUE;
  if ($filter_plugin['operator'] == 'not in') {
    $keep = FALSE;
  }

  foreach ($filter_options as $key => $field) {
    $fields[$key]['exclude'] = !in_array($key, $selected) ? $keep : !$keep;
  }
  $view->display_handler->setOption('fields', $fields);
}

/**
 * Gets the selected values based on the request made, either by GET or POST.
 *
 * @param string $filter_identifier
 *   The filter identifier.
 *
 * @return array $params
 *   The selected values.
 */
function _views_fields_on_off_get_selected(string $filter_identifier) {
  $request = \Drupal::request();
  // If Ajax is enabled, this is how to get the parameters (POST).
  $params = $request->request->all();
  if (!empty($params[$filter_identifier])) {
    return $params[$filter_identifier];
  }
  // If Ajax is disabled, this is how to get the parameters (GET).
  $params = $request->query->all();
  if (!empty($params[$filter_identifier])) {
    return $params[$filter_identifier];
  }

  return [];
}

/**
 * Implements hook_help().
 */
function views_fields_on_off_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.views_fields_on_off':
      $text = file_get_contents(__DIR__ . '/README.md');
      if (!\Drupal::moduleHandler()->moduleExists('markdown')) {
        return '<pre>' . Html::escape($text) . '</pre>';
      }
      else {
        // Use the Markdown filter to render the README.
        $filter_manager = \Drupal::service('plugin.manager.filter');
        $settings = \Drupal::configFactory()->get('markdown.settings')->getRawData();
        $config = ['settings' => $settings];
        $filter = $filter_manager->createInstance('markdown', $config);
        return $filter->process($text, 'en');
      }
  }
  return NULL;
}
